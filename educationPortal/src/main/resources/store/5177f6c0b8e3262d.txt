–• Архитектура системы - architecture knowledge
Общий план или концепция, используемая для создания информационной системы, или абстрактное описание системы, её структуры, компонентов и их взаимосвязей

_______________________________________________________________________________________________

• Logging, Monitoring, and Troubleshooting

– Logging это запись логов. Хранит информацию о том, что происходило, когда и при каких обстоятельствах.

– Monitoring это постоянный сбор и анализ различных параметров поведения системы. С его помощью можно описать и измерить в числовом выражении каждый важный аспект проекта.

– Troubleshooting это процесс диагностирования неполадки, установка причины, из-за которой возникла ошибка
_______________________________________________________________________________________________

• Bug tracking systems 

Системы отслеживания ошибок - прикладные программы, используемые разработчиками программного обеспечения с целью упрощения контроля над этапами разработки проекта и устранения возникающих ошибок.

BUGS, JIRA, TRAC

Сбор информации об ошибке.
• кто сообщил о проблеме
• дата и время, обнаружения проблемы
• серьезность проблеммы
• описание неправильного поведения программы
• кто занимается устранением проблемы
• состояние ошибки4
_______________________________________________________________________________________________

• Version control system (• • GIT • • )
– Контроль версий или управление исходным кодом - это практика отслеживания изменений программного кода и управления ими. 
– Системы контроля версий - это программные инструменты, помогающие командам разработчиков управлять изменениями в исходном коде с течением времени.

_______________________________________________________________________________________________

• Estimation(Оценка)
Оценка - присутствует в каждом проекте. 
– Разработчики оценивают продолжительность разработки
– тестировщики оценивают время тестировани
– менеджер оценивают общее время разработки проекта
_______________________________________________________________________________________________

• Development methodologies
Список часто используемых методологии

Agile development methodology - это организация работы над проектом, которая не предполагает жесткого долгосрочного планирования. Команда приближается к цели небольшими шагами, которые еще называют "итерации".

DevOps deployment methodology - это методология разработки ПО, задача которой - наладить взаимодействие программистов и сисадминов в компании.

_______________________________________________________________________________________________

• Java core.
Язык Java разработан в 1995 году Джеймсом Гослингом в компании Sun Microsystems.

Сначала язык назывался Oak в честь дуба, который рос около офиса Гослинга. Затем получил название Green. Но в итоге он стал называться Java в честь кофе с острова Ява в индонезии.

Java - это язык широкого назначения. 
Области применения:
• Серверные приложения. Часто на Java пишут приложения, не имеющие интерфейса. Они используются для получения, обработки и передачи данных на сервере.
• Десктопные приложения. В том числе и IntelliJ IDEA, Eclipse, Netbeans.
• Веб-приложения.
• Встраиваемые системы. К примеру в банкоматах и платежных терминалах.

Java может использоваться практически везде.
_______________________________________________________________________________________________

Есть 3 технологических пакета Java.
JVM, JDK, JRE.

– JDK(Java Development Kit). Это набор инструментов для разработки на языке Java. В него входят все компоненты, необходимые для того, чтобы программировать на этом языке. Он позволяет компилировать, то есть "собирать", и запускать написанный код. JDK разработан компаний Oracle, но сейчас существует дистрибутивы, созданные сторонними разработчиками. Но версия от Oracle - одна из основных.
JDK работает на всех популярных операционных системах: Windows, Linux, macOS и других. 
Без JDK можно писать код, но его не получится "собрать" в программу или запустить. JDK обязательное условие для программирования на Java, без него работать с языком не получится.

– JRE(Java Runtime Environment) исполнительная среда Java. Это набор инструментов для запуска программы. Без них код не будет работать и исполняться. JRE - составная часть JDK и входит в пакет по умолчанию.

– JVM(Java Virtual Machine). Особенность Java в том, что для запуска программ язык создает виртуальную среду, "оболочку", внутри которой все выполняется. Благодаря этой особенности язык - кроссплатформенный. Код может без доработок выполняться практически на любом устройстве. JVM - набор технологий, который реализует виртуальную оболочку. JVM входит в пакет JRE, точно так же как сам JRE входит в JDK.

– JVM имеет две основыне функции:
1) Позволяет запускать программы, написанные на Java, на любых устройствах или операционных системах. Так реализуется принцип Java - "Написал один раз, запускай везде".
2) Управляет и оптимизирует память, которую используют программы
В Java памятью управляет JVM с помощью процессора, который называется сборкой мусора - он непрерывно определяет и удаляет неиспользуемую память в Java - приложениях. Сборка мусора происходит внутри работающей JVM.
JVM состоит из трех основных частей:
• Спецификация JVM. До конца не определяет все детали реализации виртуальной машины. Это значит, что остается максимальная свобода творчества для разработчика, который работает с ней.
• Реализация JVM. Приводит к созданию реальной программы, которая и является реализацией JVM.
• Экземпляр JVM. После того, как спецификация JVM реализована и выпущена в качестве самостоятельной программы. Вы можете загрузить ее как приложение. Эта загруженная программа является экземпляром виртуальной машины.
_______________________________________________________________________________________________

• ООП.
– Инкапсуляция. Инкапсуляция в Java является механизмом обертывания данных(переменных) и кода, работающего с данными(методами), в одно целое. В инкапсуляции переменные класса будут скрыты от других классов и доступ к ним может быть получен только с помощью метода их текущего класса. По-другому это называется скрытием данных.
Пример:
Объявляем переменные класса как private, а геттерам и сеттерам public.

– Наследование. Это процесс перенимания классом свойств(методов и полей) другого класса. С использованием в Java наследования информация становится управляемой в иерархическом порядке.

– Полиморфизм. Функция, которая позволяет нам выполнять одно действие разными способами. Пример. Animal sound(). Cat meow() and Dog bark();

– Абстракция. Это использование только самых важных переменных или методов. Способность отделить самые важные характеристики от второстепенных. Пример. Телефон из 19 века и современный телефон. Звонить и принимать вызовы.
_______________________________________________________________________________________________

•– Коллекции. Для хранения наборов данных в Java предназначены массивы. Но они имеют фиксировнную длину. Для решения этой проблемы былы созданы коллекции. Суть коллекции не только в гибкости, но и в том, что они реализуют различные алгоритмы и структуры данных, такие как стек, очередь, дерево и другие.

В основе всех коллекции лежит применение того или иного интерфейса, который определяет базовый функционал. Среди этих интерфейсов можно выделить следующие:
• Collection: Базовый интерфейс для всех коллекций и других интерфейсов коллекций.
• Queue: наследует интерфейс Collection и представляет функционал для структур данных в виде очереди.
• Deque: наследует интерфейс Queue u представляет функционал для двунаправленных очередей.
• List: наследует интерфейс Collection и представляет функциональность простых списков.
• Set: также расширяет интерфейс Collection и используется для хранения множеств уникальных объектов.
• SortedSet: расширяет интерфейс Set для создания сортированных коллекций.
• Map: предназначен для созданий структур данных в виде словаря, где каждый элемент имеет определенный ключ и значение. В отличие от других коллекций не наследуется от интерфейса Collection.

Классы коллекции.
• ArrayList: простой список объектов.
• LinkedList: представляет связанный список.
• ArrayDeque: класс двунаправленной очереди, в которой мы можем произвести вставку и удаление как в начале коллекции, так и в ее конце.
• HashSet: набор объектов или хеш-множество, где каждый элемент имеет ключ - уникальный хеш-код.
• TreeSet: набор отсортированных объектов в виде дерева.
• HashMap: структура данных в виде словаря, в котором каждый объект имеет уникальный ключ и некоторое значение.
• TreeMap: структура данных в виде дерева где каждый элемент имеет уникальный ключ и некоторое значение.

• Итератор — это поведенческий паттерн, позволяющий последовательно обходить сложную коллекцию, без раскрытия деталей её реализации. Благодаря Итератору, клиент может обходить разные коллекции одним и тем же способом, используя единый интерфейс итераторов.
______________________________________________________________________________________________

• Методы equals и hashcode
Любой класс в Java наследуется от класса Object. Таким образом класс Object является суперклассом для любого класса.

метод equals() применяют чтобы сравнить объекты. Часто этот метод переопределяют, чтобы сравнивать объекты по конкретным выбранным полям.
К примеру есть некий класс Item. У него есть поля name, price и brand
на этом примере мы можем, в зависимости от наших требований, проверять объекты на равенство по name и price. что будет означать что поле brand мы не проверяем.

метод hashcode также предназначен для сравнения объектов. Если коротко он нужен для повышения производительности. Он возвращает 32-битное числовое значение типа int фиксированной длины для любого объекта. Если нужно сравнить два объекта с большим количеством полей, то будет лучше сравнить их hashcode() и если они равны, то только тогда переходить к сравнению equals().

если x.equals(y)==true, то обязательно hashcode(x)==hashcode(y)
если hashcode(x)==hashcode(y), то не обязательно x.equals(y)==true

у hashcode() есть ограниченное количество значений, чуть более 4 млрд. Если нам нужно написать программу для хранения информации о всех жителях земли, то из-за ограничений hashcode() мы не можем каждому жителю дать уникальный hashcode(), в связи с чем у некоторых жителей они будут повторяться. Поэтому если у 2 объектов hashcode() равны, то не обязательно equals()==true
______________________________________________________________________________________________

– Интерфейсы Comparable и Comparator.
• Comparable
Используют чтобы сравнивать и сортировать объекты. Имеет единственный метод compareTo()
Пример использования
```
class Person implements Comparable<Person> {
     
    private String name;
    Person(String name){
         
        this.name = name;
    }
    String getName(){
    return name;
    }
     
    public int compareTo(Person p){
        return name.compareTo(p.getName());
    }
}
```
• Comparator
Используется в том случае если интерфейс Comparable не реализован или его функционал не подходит. Ключевой метод compare()
Пример использования
```
class PersonNameComparator implements Comparator<Person>{
  
    public int compare(Person a, Person b){
      
        return a.getName().compareTo(b.getName());
    }
}
class PersonAgeComparator implements Comparator<Person>{
  
    public int compare(Person a, Person b){
      
        if(a.getAge()> b.getAge())
            return 1;
        else if(a.getAge()< b.getAge())
            return -1;
        else
            return 0;
    }
}


Comparator<Person> pcomp = new PersonNameComparator().thenComparing(new PersonAgeComparator());
TreeSet<Person> people = new TreeSet(pcomp);
people.add(new Person("Tom", 23));
people.add(new Person("Nick",34));
people.add(new Person("Tom",10));
people.add(new Person("Bill",14));
 
for(Person  p : people){
    System.out.println(p.getName() + " " + p.getAge());
}
```
______________________________________________________________________________________________

4) Многопоточность в Java.
Это одновременное выполнение двух или более потоков для максимального использования центрального процессора. Каждый поток работает параллельно и не требует отдельной области памяти. К тому же, переключение контекста между потоками занимает меньше времени.

использование многопоточности. Если один поток ожидает ответ на запрос, отправленный по сети, другой поток в это время может использовать CPU для выполнения других задач. Если в компьютере несколько CPU или CPU имеет несколько ядер, то многопоточность позволяет приложению использовать эти дополнительные ядра.

потоки могут общаться между собой посредством методов wait(), notify(), notifyAll();

Состояния потоков:
New — когда создается экземпляр класса Thread, он пока не работает.
Running — поток запущен и процессор начинает его выполнение. Во время выполнения состояние потока может измениться на Runnable, Dead, Blocked. 
Suspended — запущенный поток приостанавливает работу, затем можно возобновить его выполнение. Поток начнет работать с того места, где его остановили.
Blocked — поток ожидает высвобождение ресурсов или завершение операции ввода-вывода. Находясь в этом состоянии поток не потребляет процессорное время.
Terminated — поток немедленно завершает свое выполнение. Его работу нельзя возобновить. Причинами завершения потока могуть быть ситуации, когда код потока полностью выполнен или во время выполнения потока произошла ошибка(например, ошибка сегментации или необработанного исключения).
Dead — после того, как поток завершил свое выполнение, его состояние меняется на dead, то есть он завершает свой жизненный цикл.
______________________________________________________________________________________________

– • RESTful services and WebAPI. HTTP и HTTPS

HTTP(Hyper Text Transer Protocol) - протокол передачи данных.
HTTPS (... Secure) - это расширение протокола HTTP, которое обеспечивает защиту передаваемых данных. Это помогает защитить сайт от хакерских атак.

Служба REST реализуется следующим образом:
• Формат обмена данными: здесь нет никаких ограничений. JSON – очень популярный формат, хотя можно и другие по типу XML
• Транспорт: всегда HTTP. REST полностью построен на основе HTTP.

______________________________________________________________________________________________


• Spring Core. Spring Framework универсальный фреймворк для Java, который обеспечивает модель разработки и конфигурации для современных бизнес-приложений. В отличие от Java EE разработчики на Spring могут сосредоточиться на бизнес-логике без лишних настроек.
______________________________________________________________________________________________

• Spring MVC. Обеспечивает архитектуру паттерна Model–View–Controller при помощи слабо связанных готовых компонентов. Паттерн MVC разделяет аспекты приложения(логику ввода, бизнес-логику и логику UI), обеспечивая при этом свободную связь между ними.

1) Model(Модель) - содержит данные приложения. Включает в себя POJO-классы - простые старые Java-объекты или по другому - бины.
2) View(Отображение, Вид) отвечает за отображение данных Модели, - как правило, генерируя HTML, которые мы видим в своём браузере.
3) Controller (Контроллер) обрабатывает запрос пользователя, создает соответствующую Модель и передаёт её для отображения в Вид.

Вся логика работы Spring MVC построена вокруг DispatcherServlet, который принимает и обрабатывает все HTTP-запросы(из UI) и ответы на них.

Последовательность событий.
Поступает HTTP-запрос -> DispatcherServlet обращается к интерфейсу HandlerMapping, при помощи которого определяет Controller, на который отправляет запрос -> Controller вызывает соответствующий метод, основанный на GET или POST, который определяет данные Модели, основанные на определенной бизнес-логике и возвращает в DispatcherServlet имя Вида(View) -> При помощи интерфейса ViewResolver DispatcherServlet определяет, какой Вид нужно использовать на основании полученного имени-> DispatcherServlet отправляет данные Модели в виде атрибутов в Вид, который отображается в браузере.
______________________________________________________________________________________________

Миссией Spring Data является предоставление единой модели программирования с использованием Spring для доступа к данным. Фреймворк позволяет облегчить использование технологий доступа к данным, реляционных и не реляционных баз данных, облачных баз данных. Spring DATA - базовый проект, который включает множество других подпроектов, которые работают с конкретными базами данных.
______________________________________________________________________________________________

• Spring Cache. Он используется в больших, высоконагруженных проектах, с десятками тысяч запросов в минуту. Чтобы не перегружать базу кэшируют обращение к репозиторию. 
______________________________________________________________________________________________

• Spring Reactor. 

– Если в традиционном программировании на каждый запрос выделяется один поток и он проживает весь жизненный цикл запроса, попутно блокируясь ожидая ответа. ТО в реактивном программировании потоки используются асинхронно, в данном случае потоки не ждут ответа, и могут приступать к выполнение других задач, когда ответ будет готов с ним будет работать другой поток, то есть потоки не блокируются.

Реактивное программирование - это неблокирующие приложения, которые являются асинхронными и требуют небольшого количества потоков для масшатибования. Ключевым аспектом этого определения является концепция противодавления(backpressure), которая является механизмом, гарантируюим, что производители не перегружают потребителей.

Какие проблемы решает?
В традицинном способе программирования при использовании Spring MVC и его развертывание в контейнере сервлетов, как Tomcat, имеет ограниченный пул потоков для обработки HTTP-запросов, где каждому входящему запросу будет назначен поток, и этот поток будет обрабатывать весь жизненный цикл запроса(модель "поток на запрос"). Это означает, что приложение сможет обрабатывать количество одновременных запросов, равное размеру пула потоков. Его количество можно увеличить, 1 поток весит около 1 МБ, то есть чем больше потоков тем выше потребление памяти.

Преимущества.
1) отходим от модели поток на запрос и можем обрабатывать больше запросов с небольшим количеством потоков.
2) предотвращаем блокировку потоков при ожидании завершения операций ввода-вывода.
3) упрощаем паралеллельные вызовы.
______________________________________________________________________________________________

• Apache Commons, Java Logging Libraries, Json for Java

– Apache Commons - проект фонда Apache Software Foundation, цель которой разработку и поддержку библиотек Java.

– Java Logging Libraries - log4j, slf4j

– JSON(JavaScript Object Notation) - это общий формат для представления значений и объектов.
______________________________________________________________________________________________

• @Bean - это обычный объект. Разница лишь в том, что бинами принято называть те объекты, которые управляются Spring-ом и живут внутри его DI-контейнера. Бином является почти все в Spring – сервисы, контроллеры, репозитории, по сути все приложение состоит из бинов.

• DI контейнер это ключевой фундаментальный механизм Spring. Любое приложение Spring - это набор бинов, связанных вместе через DI контейнер.

• @Configuration(Конфигурация). Если приложение набор бинов, чтобы оно заработало нам нужно этот набор описать. Конфигурация - это просто описание доступных бинов.

• @Component(Сканирование компонентов) подход для упрожения конфигурации приложения. Автоматом создает Bean на основании нужного класса.
______________________________________________________________________________________________

• JDBC - соединение с базами данных - стандарт взаимодействия Java-приложений с различными СУБД.
______________________________________________________________________________________________

• ORM(Object-Relational Mapping) объектно-реляционное отображение - технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, создавая "виртуальную объектную базу данных".

• JPA(Java persistence API) это спецификация Java EE и Java SE, описывающая систему управления сохранением java объектов в таблицы реляционных баз данных в удобном виде. 

• Hibernate одна из самых популярных открытых реализаций последней версии спецификации JPA.
JPA только описывает правила и API, а Hibernate реализует эти описания.

• JDO(Java Data Objects) общая спецификация которая описывает ORM для любых возможных баз и хранилищ.

______________________________________________________________________________________________

• Исключения
– Throwable -> Error, Exception
    Expection-> Runtime (необрабатываемые) -> IOExpection, SQLException(Обрабатываемые)

Ключевые слова:

• try – определяет блок кода, в котором может произойти исключение;
• catch – определяет блок кода, в котором происходит обработка исключения;
• finally – определяет блок кода, который является необязательным, но при его наличии выполняется в любом случае независимо от результатов выполнения блока try.

______________________________________________________________________________________________

Отношения между классами

 — агрегация (aggregation) — описывает связь «часть»–«целое», в котором «часть» может существовать отдельно от «целого».

 — композиция (composition) — подвид агрегации, в которой «части» не могут существовать отдельно от «целого».

 — зависимость (dependency) — изменение в одной сущности (независимой) может влиять на состояние или поведение другой сущности (зависимой).

 — обобщение (generalization) — отношение наследования или реализации интерфейса.

______________________________________________________________________________________________

Виды паттернов.
• поведенческие(behaioral);
• порождающие(creational);
• структурные(structural);

Поведенческие паттерны:
– Цепочка обязанностей(Chain of responsibility). Избегает связывания отправителя запроса с его получателем, давая возможность обработать запрос более чем одному объекту. Связывает объекты-получатели и передает запрос по цепочке пока объект не обработает его.
– Команда(command). Инкапсулирует запрос в виде объекта, позволяя передавать их клиентам в качестве параметров, ставить в очередь, логировать а также поддерживает отмену операций.
– Интерпретатор. Получая формальный язык, определяет представление его грамматики и интерпретатор, использующий это представление для обработки выражений языка.
– Итератор. Предоставляет способ последовательного доступа к элементам множества, независимо от его внутреннего устройства.


Порождающие паттеры:
– Абстрактная фабрика(abstract factory). Предоставляет интерфейс для создания групп связанных или зависимых объектов, не указывая их конкретный класс.
– Строитель(Builder). Разделяет создание сложного объекта и инициализирует его состояние так, что одинаковй процесс построения может создать объекты с разным состоянием.
– Фабричный метод(factory method). Определяет интерфейс для создания объекта, но позволяет подклассам решать, какой класс инстанцировать. Позволяет делегировать создание объекта подклассам.


Структурные паттерны:
– Адаптер. Конвертирует интерфейс класса в другой интерфейс, ожидаемый клиентом. Позволяет классам с разными интерфейсами работать вместе.
– Прокси. Предоставляет замену другого объекта для контроля доступа к нему.
– Мост. Разделяет абстракцию и реализацию так, чтобы они могли изменяться независимо.
– Компоновщик(Composite). Компонует объекты в древовидную структуру, представляя их в виде иерархии. Позволяет клиенту одинаково обращаться как к отдельному объекту, так и к целому поддереву.

____________________________________________________________________________________________

• Правила переопределения sql.
• Контракт между equals и hashcode
• Стоимость запроса sql
• Индексы sql
• Типы индексов sql
• Оптимизация sql
• Group sql
• Having sql
• Spring потрошитель
